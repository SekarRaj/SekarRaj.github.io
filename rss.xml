<?xml version="1.0" encoding="utf-8"?>






<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Sekar&#39;s blog</title>
        <link>https://SekarRaj.github.io/</link>
        <description>Sekar&#39;s personal blog</description>
        <generator>Hugo 0.72.0 https://gohugo.io/</generator>
        
            <language>en</language>
        
        
            <managingEditor>sekar_raj@hotmail.com (Rajasekaran Rajaram)</managingEditor>
        
        
            <webMaster>sekar_raj@hotmail.com (Rajasekaran Rajaram)</webMaster>
        
        
        <lastBuildDate>Mon, 10 Aug 2020 17:22:32 &#43;0000</lastBuildDate>
        
            <atom:link rel="self" type="application/rss&#43;xml" href="https://SekarRaj.github.io/rss.xml" />
        
        
            <item>
                <title>ZGC</title>
                <link>https://SekarRaj.github.io/posts/zgc/</link>
                <guid isPermaLink="true">https://SekarRaj.github.io/posts/zgc/</guid>
                <pubDate>Sat, 04 Jul 2020 23:56:38 &#43;0530</pubDate>
                
                    <author>sekar_raj@hotmail.com (Rajasekaran Rajaram)</author>
                
                
                
                    <description>&lt;p&gt;Single generational concurrent garbage collection. Under 10ms max pause time.&lt;/p&gt;
&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;-XX:+UseZGC&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;tuning&#34;&gt;Tuning&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameter&lt;/th&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Xmx&lt;code&gt;&amp;lt;size&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Max heap size&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;XX:ConcGCThreads=&lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Number of GC threads&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Xlog:gc*&lt;/td&gt;
&lt;td&gt;Basic logging&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Xlog:gc**&lt;/td&gt;
&lt;td&gt;Detailed logging&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;options&#34;&gt;Options&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;-XX:SoftMaxHeapSize&lt;/em&gt; &lt;sup&gt;Java 13&lt;/sup&gt;  - Soft limit of the max allocated Heap size. During memory spikes the heap size is allowed to grow beyond this threshold, however, it will be brought back during un-commit of unused memory.&lt;/p&gt;
&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://malloc.se/blog/zgc-softmaxheapsize&#34;&gt;Blog-I&lt;/a&gt;*&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://inside.java/tag/gc&#34;&gt;Blog-II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.openjdk.java.net/display/zgc/Main&#34;&gt;OpenJDK - Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://openjdk.java.net/jeps/351&#34;&gt;OpenJDK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/articles/understand-classic-java-garbage-collection/?utm_source=email&amp;amp;utm_medium=java&amp;amp;utm_campaign=newsletter&amp;amp;utm_content=05122020&#34;&gt;InfoQ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://SekarRaj.github.io/tags/java/">Java</category>
                                
                            
                                
                                
                                
                                    <category domain="https://SekarRaj.github.io/tags/garbage-collection/">Garbage Collection</category>
                                
                            
                                
                                
                                
                                    <category domain="https://SekarRaj.github.io/tags/zgc/">ZGC</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Java JIT Compiler</title>
                <link>https://SekarRaj.github.io/posts/java_compilers/</link>
                <guid isPermaLink="true">https://SekarRaj.github.io/posts/java_compilers/</guid>
                <pubDate>Fri, 03 Jul 2020 10:54:12 &#43;0530</pubDate>
                
                    <author>sekar_raj@hotmail.com (Rajasekaran Rajaram)</author>
                
                
                
                    <description>&lt;h2 id=&#34;hotspott-jit-compilers&#34;&gt;Hotspott JIT compilers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C1 (client) and C2 (Server) JIT compilers&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;openj9&#34;&gt;OpenJ9&lt;/h2&gt;
&lt;p&gt;-Xshareclasses&lt;/p&gt;
&lt;p&gt;-Xtune:virtualized&lt;/p&gt;
&lt;h2 id=&#34;graal-compiler&#34;&gt;Graal Compiler&lt;/h2&gt;
&lt;p&gt;JIT - Just In Time compiler&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Compile code at runtime to optimize based on current behavior&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/presentations/tradeoffs-java-compilers/?utm_source=email&amp;amp;utm_medium=editorial&amp;amp;utm_campaign=SpecialNL&amp;amp;utm_content=06242020&amp;amp;forceSponsorshipId=2033&#34;&gt;Infoq-1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://SekarRaj.github.io/tags/java/">Java</category>
                                
                            
                                
                                
                                
                                    <category domain="https://SekarRaj.github.io/tags/jvm/">JVM</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Java and *VM</title>
                <link>https://SekarRaj.github.io/posts/java_and_vm/</link>
                <guid isPermaLink="true">https://SekarRaj.github.io/posts/java_and_vm/</guid>
                <pubDate>Tue, 23 Jun 2020 02:00:55 &#43;0530</pubDate>
                
                    <author>sekar_raj@hotmail.com (Rajasekaran Rajaram)</author>
                
                
                
                    <description>&lt;p&gt;I have used Java on and off and since the release of Java 6(or JDK 1.6) and have come to appreciate the effort and planning that went into JEPs. Despite the oracle&amp;rsquo;s license changes, the evolution of Java is quite phenominal. Java 8 brought in interesting function features and Java 9 through 11 have brought in breaking changes. On the same time depreciating features goes long way in the languages journey ahead. Developers can see warning during compilation or keep ignoring it and have tech debts pileups for the subsequent version is released. Apart from the language the JVM also has gone through lot of improvements. Few exciting projects such as &lt;a href=&#34;https://openjdk.java.net/projects/loom/&#34;&gt;Loom&lt;/a&gt; and &lt;a href=&#34;https://www.infoq.com/news/2020/05/java-leyden/?utm_source=email&amp;amp;utm_medium=editorial&amp;amp;utm_campaign=SpecialNL&amp;amp;utm_content=06242020&amp;amp;forceSponsorshipId=2033&#34;&gt;Leyden&lt;/a&gt; are exciting features to look forward to.&lt;/p&gt;
&lt;h2 id=&#34;vm-functionalities&#34;&gt;VM Functionalities&lt;/h2&gt;
&lt;p&gt;To work with dynamically allocated objects the VM provides the following features,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Interpreter&lt;/li&gt;
&lt;li&gt;Class Loading (AOT and appCDS)&lt;/li&gt;
&lt;li&gt;Garbage Collections - A look at Java&amp;rsquo;s GC&lt;/li&gt;
&lt;li&gt;Alias Analysis&lt;/li&gt;
&lt;li&gt;Biased Locking&lt;/li&gt;
&lt;li&gt;Inlining&lt;/li&gt;
&lt;li&gt;Constant folding&lt;/li&gt;
&lt;li&gt;Global value numbering&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;jvm&#34;&gt;JVM&lt;/h2&gt;
&lt;p&gt;Java has been undisputed champion when it comes to cross platform portability. However, this feature is achieved using the JVM which act as an intermediary between the host operating system and class files. The class file itself has no relation to the underlying architecture (x86, ARM etc) or the operating system. The JVM does this heavy lifting. The setup has definitely served it purpose, however, recent developments on containers and microservies had a different prespective. Application with low memory footprint and quick start time is of the need (Serverless).&lt;/p&gt;
&lt;h2 id=&#34;jit-and-aot&#34;&gt;JIT and AOT&lt;/h2&gt;
&lt;p&gt;JIT and AOT (since Java 9) are used to address these problems. The JIT does optimization at run time and it heavily affects the start up time.&lt;/p&gt;
&lt;h2 id=&#34;graalvm&#34;&gt;GraalVM&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;https://www.graalvm.org/docs/why-graal/&#34;&gt;GraalVM&lt;/a&gt; is an alternative for JVM that has proven to provide significant performance improvements. If achieves this using a new JIT compiler and AOT compiled native images. GraalVM can be used instead of the JVM or we can leverage the native image build mode to achieve even smaller and faster packages. We should be vary of options that are not avilable in the native mode and adidtional considerations to get them working. For example, Reflection in Quarkus by default is not enabled in the native mode and additional annotations are required to get it working.&lt;/p&gt;
&lt;p&gt;When compiled in the native mode, the AOT compiler picks only those necessory componets that can be reaced from the &lt;code&gt;main&lt;/code&gt; code and drops everything else. Substrate VM which has the bare essestial components required to run the program is included thereby limiting the size of the pacckage.&lt;/p&gt;
&lt;p&gt;Graal isn&amp;rsquo;t only for Java. It has support for numerous languages that can be used alongside with Java to complement it. It makes interopreability among these languages easier.&lt;/p&gt;
&lt;h3 id=&#34;graal&#34;&gt;Graal&lt;/h3&gt;
&lt;p&gt;Java JIT that runs on top of Hotspot VM. Can be used to replace client and server compilers.&lt;/p&gt;
&lt;h2 id=&#34;tornadovm&#34;&gt;TornadoVM&lt;/h2&gt;
&lt;p&gt;Software architectures aren&amp;rsquo;t the only actor that has mode improvements. Hardware itself has evolved itself to enable faster execution. CPU&amp;rsquo;s are the only target of programmers, GPU has started playing a major role. AI and Machine learning has introduced newer models of programming. Matrix manipulation isn&amp;rsquo;t used anymore in graphics rendering alone, data science uses wide variety of mathemical operations that are faster in GPU.&lt;/p&gt;
&lt;p&gt;Massive paralleization is achieved by leveraging the heterogenus hardware components. Java in itself doesn&amp;rsquo;t have this capabilities. OpenCL api binding are used to hand over the computationation tasks to OpenCL which then talks with the GPU.&lt;/p&gt;
&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.omnisci.com/technical-glossary/cpu-vs-gpu#:~:text=The%20main%20difference%20between%20CPU,resolution%20images%20and%20video%20concurrently&#34;&gt;CPU vs GPU&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/beehive-lab/TornadoVM&#34;&gt;TornadoVM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.graalvm.org/docs/why-graal/&#34;&gt;GraalVM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;Infoq TornadoVM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/presentations/tradeoffs-java-compilers/?utm_source=email&amp;amp;utm_medium=editorial&amp;amp;utm_campaign=SpecialNL&amp;amp;utm_content=06242020&amp;amp;forceSponsorshipId=2033&#34;&gt;Infoq&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://SekarRaj.github.io/tags/java/">Java</category>
                                
                            
                                
                                
                                
                                    <category domain="https://SekarRaj.github.io/tags/jvm/">JVM</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Distributed locks</title>
                <link>https://SekarRaj.github.io/posts/distributed_locks/</link>
                <guid isPermaLink="true">https://SekarRaj.github.io/posts/distributed_locks/</guid>
                <pubDate>Sun, 21 Jun 2020 02:31:55 &#43;0530</pubDate>
                
                    <author>sekar_raj@hotmail.com (Rajasekaran Rajaram)</author>
                
                
                
                    <description>&lt;blockquote&gt;
&lt;p&gt;Matrix Reloaded&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;The Keymaker&lt;/strong&gt; Only the One can open the door. And only during that window can that door be opened.&lt;br&gt;
&lt;br /&gt;
&lt;strong&gt;Niobe&lt;/strong&gt;  How do &lt;em&gt;you&lt;/em&gt; know all this?&lt;br&gt;
&lt;br /&gt;
&lt;strong&gt;The Keymaker&lt;/strong&gt; I know because I &lt;em&gt;must&lt;/em&gt; know. It is my purpose. It is the reason I am here. The same reason we are &lt;em&gt;all&lt;/em&gt; here.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Writing concurrent programs in a single machine is hard enough. It is difficult to reason about the correctness of the program and the system invariants. There are edge cases lurking around the corner that will never be found in any tests and lies dormant in production as well. There comes a specific set of user actions case which brings the the issue to light. Alas, figuring out what exactly happened and replicating them is quite harder.&lt;/p&gt;
&lt;p&gt;Traditional blocking programming model worked for the blocking syncronization mechanism. However, way of modelling system has changed significantly and reactive programming is the current fad. Creating and running a reactive programming is not a easy task on it own; reason about the control flow, error handling and other various nuances are things we give up. Nevertheless, the reactive model has proved to be effective low cost solution. One primary consideration when using event loop based model is not to have any blocking code.&lt;/p&gt;
&lt;p&gt;Distributed locks ups the ante further with so many variants. Networks, timers, multiple systems etc.&lt;/p&gt;
&lt;h2 id=&#34;types&#34;&gt;Types&lt;/h2&gt;
&lt;p&gt;The Chubby reference attached in the reference sections describes locks as either &lt;em&gt;fine&lt;/em&gt; grained(short duration) or &lt;em&gt;coarse&lt;/em&gt; grained(long duration).&lt;/p&gt;
&lt;p&gt;Typical locking API provided by popular language is provided by the distributed locks. Under the hood the implementation details vary, nevertheless it is similar to locks we use in concurrent programming. Locks can be wither exclusive(monitor locks) or shared (read write locks).&lt;/p&gt;
&lt;h2 id=&#34;why-to-use-a-distributed-lock&#34;&gt;Why to use a distributed lock?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Synchronization&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Correctness&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;expectation&#34;&gt;Expectation&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Availability&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reliable&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;problems&#34;&gt;Problems&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The lock master fails&lt;/li&gt;
&lt;li&gt;Client holding the lock fails&lt;/li&gt;
&lt;li&gt;Delays in n/w transmission&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In an Uthopian universe the locks should work as expected. In reality things are far from perfect. First and foremost is what happens if the client holding the lock fails before giving it up. Chubby uses a &lt;em&gt;lock-delay&lt;/em&gt; duration in whichno other client claim access to it.&lt;/p&gt;
&lt;h2 id=&#34;chubby&#34;&gt;Chubby&lt;/h2&gt;
&lt;p&gt;Chubby refers to the shared locks as advisory locks. The locks themselves contain a lease which signfies the duration of the lock is valid for. The lock has to be renewed to keep the session active. &lt;em&gt;KeepAlive&lt;/em&gt; requests are sent to the server to achieve this functionality.&lt;/p&gt;
&lt;p&gt;Chubby is used for coarse-grained locks and primary use case as per the reference is name server cache and leader election.&lt;/p&gt;
&lt;p&gt;Current version leverages in memory storage and has backup mechanism set up to handle failures.&lt;/p&gt;
&lt;p&gt;This &lt;a href=&#34;https://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html&#34;&gt;blog&lt;/a&gt; explains the problems of distributed locking.&lt;/p&gt;
&lt;p&gt;Different implementation of distributed locks are available. Hazelcast used &lt;em&gt;Fenced lock&lt;/em&gt;, Chubby calls it &lt;em&gt;Advisory locks&lt;/em&gt;, Redis uses the concept of &lt;em&gt;leases&lt;/em&gt; which is the underlying mechanism in Chubby as well.&lt;/p&gt;
&lt;p&gt;The best approach is to avoid distributed locks all together. If you really need to use them choose wisely.&lt;/p&gt;
&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hazelcast.com/blog/testing-the-cp-subsystem-with-jepsen/&#34;&gt;Link-I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hazelcast.com/blog/long-live-distributed-locks/&#34;&gt;Link-II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Distributed_lock_manager&#34;&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://storage.googleapis.com/pub-tools-public-publication-data/pdf/c64be13661eaea41dcc4fdd569be4858963b0bd3.pdf&#34;&gt;Chubby Lock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cs.wheaton.edu/~cgray/writing/leases-sosp.pdf&#34;&gt;Leases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://SekarRaj.github.io/tags/distributed-systems/">Distributed systems</category>
                                
                            
                                
                                
                                
                                    <category domain="https://SekarRaj.github.io/tags/locks/">locks</category>
                                
                            
                        
                    
                
            </item>
        
    </channel>
</rss>
